# -*- coding: utf-8 -*-
"""detector.py - Core Scanning Logic

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tMhOjp6v6c_-nsvyMrkWByQ6cu7Bw4ig
"""

# NetOS-Detect: detector.py


import argparse
import logging
from scapy.all import IP, TCP, sr1, ICMP

# Configure logging to suppress verbose Scapy outputs
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

def get_os_guess(ttl):
    """
    Makes a simple OS guess based on the TTL value of a received packet.
    This is a basic heuristic and can be inaccurate.
    """
    if ttl <= 64:
        return "Linux/Unix/macOS"
    elif ttl <= 128:
        return "Windows"
    elif ttl <= 255:
        return "Cisco/Solaris/HPUX"
    else:
        return "Unknown"

def probe_host(target_ip, timeout=2):
    """
    Probes a target host to determine its OS characteristics.

    Args:
        target_ip (str): The IP address of the target host.
        timeout (int): The timeout in seconds for waiting for a response.

    Returns:
        dict: A dictionary containing the probe results.
    """
    results = {
        "ip": target_ip,
        "status": "Down",
        "ttl": None,
        "window_size": None,
        "os_guess": "Unknown"
    }

    try:
        # --- 1. ICMP Ping to check if host is up ---
        print(f"[*] Pinging host: {target_ip}...")
        ping_pkt = IP(dst=target_ip) / ICMP()
        ping_resp = sr1(ping_pkt, timeout=timeout, verbose=0)

        if ping_resp is None:
            print(f"[-] Host {target_ip} appears to be down or is not responding to pings.")
            return results
        else:
            print(f"[+] Host {target_ip} is up!")
            results["status"] = "Up"
            results["ttl"] = ping_resp.ttl
            results["os_guess"] = get_os_guess(ping_resp.ttl)

        # --- 2. TCP SYN probe to get TCP-level details ---
        # We probe a common port like 80 (HTTP)
        print(f"[*] Sending TCP SYN probe to port 80 on {target_ip}...")
        tcp_syn_pkt = IP(dst=target_ip) / TCP(dport=80, flags="S")
        tcp_resp = sr1(tcp_syn_pkt, timeout=timeout, verbose=0)

        if tcp_resp and tcp_resp.haslayer(TCP):
            print("[+] Received TCP response.")
            # If the port is open, we get a SYN-ACK
            if tcp_resp.getlayer(TCP).flags == 0x12: # SYN-ACK
                results["window_size"] = tcp_resp.getlayer(TCP).window
                print(f"    - Port 80 is open.")
                print(f"    - TCP Window Size: {results['window_size']}")
            # If the port is closed, we get a RST-ACK
            elif tcp_resp.getlayer(TCP).flags == 0x14: # RST-ACK
                results["window_size"] = tcp_resp.getlayer(TCP).window
                print(f"    - Port 80 is closed.")
                print(f"    - TCP Window Size: {results['window_size']}")

            # We can use the TTL from the TCP response for a potentially more reliable guess
            results["ttl"] = tcp_resp.ttl
            results["os_guess"] = get_os_guess(tcp_resp.ttl)
        else:
            print("[-] No TCP response received from port 80.")

    except Exception as e:
        print(f"[!] An error occurred: {e}")

    return results

def print_results(results):
    """Prints the formatted results of the scan."""
    print("\n" + "="*40)
    print("      OS Detection Scan Results")
    print("="*40)
    print(f"  Target IP:      {results['ip']}")
    print(f"  Host Status:    {results['status']}")
    print("-" * 40)
    if results['status'] == 'Up':
        print(f"  Initial TTL:    {results['ttl']}")
        print(f"  TCP Window Size:{'N/A' if results['window_size'] is None else results['window_size']}")
        print(f"  OS Guess:       {results['os_guess']}")
    print("="*40)
    print("\nDisclaimer: OS Guess is a heuristic based on TTL and may not be accurate.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="NetOS-Detect: A simple OS fingerprinting tool.",
        epilog="Warning: This tool should only be used on networks where you have explicit authorization."
    )
    parser.add_argument("--target", required=True, help="The IP address of the target host to scan.")

    args = parser.parse_args()

    print("--- Starting NetOS-Detect ---")
    print("Warning: This script must be run with root/administrator privileges.")

    scan_results = probe_host(args.target)
    print_results(scan_results)

    print("--- Scan Complete ---")